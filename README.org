* Introduction

This is python code that uses selenium to control a browser to log into google colab and open an ssh tunnel to an external server.

* Dependendencies

- external ssh server
- firefox or chrome
- ssh-keygen

* Overview
| source          | generator          | importance | comment                                                                                      |
|-----------------+--------------------+------------+----------------------------------------------------------------------------------------------|
| config.py       | config.py.changeme |          1 | contains ssh configuration for the colab server and your own server                          |
| run_00_start.py | gen.lisp           |          1 | starts a web browser, logs into to google colab, starts an instance, installs sshd with keys |


* Usage:

- add server into source/config.py, change user name in run_00_start.py, add passwd in source/p
- run python run_00_start.py this will install keys on google server and establish tunnel to server
- ssh server -L 2228:localhost:2228
- cd /dev/shm;  ssh -p 2228 localhost -l root -i key_from_here_to_google -L 5901:localhost:5901
#+BEGIN_SRC sh
#sudo apt-get update
#sudo apt-get upgrade
export PATH=$PATH:/usr/local/cuda/bin
sudo apt install vnc4server xterm fvwm sbcl nvidia-nsight
wget https://beta.quicklisp.org/quicklisp.lisp
sbcl --load quicklisp.lisp --eval '(progn (quicklisp-quickstart:install))' --eval '(progn (ql:quickload "quicklisp-slime-helper") (sb-ext:quit))'
cat >/root/.sbclrc <<EOL
#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))
EOL
cd /root/quicklisp/local-projects
git clone https://github.com/plops/cl-cpp-generator
git clone https://github.com/plops/cl-py-generator
git clone https://github.com/plops/cl_ctl_colab
git clone https://github.com/plops/cl-gen-cufft
cd cl-gen-cufft/source
mkdir b
cd b
cmake ..
make
vncserver -geometry 1024x768
export DISPLAY=:0
/usr/local/cuda-10.0/bin/nsight
#+END_SRC
- nvidia-nsight installs 9 into /usr/bin/nsight but it seems to pull in the dependencies required to run the cuda 10 version (which is already in /usr/local/cuda/bin/nsight)

* Useful Packages
- net-tools .. netstat
- mesa-utils .. glxinfo
- nvidia-nsight nvidia-profiler might not be necessary, cuda-nsight already there?
- sudo nvidia-xconfig -a --allow-empty-initial-configuration --use-display-device=None --virtual=1024x768
- https://virtualgl.org/Documentation/HeadlessNV
- https://gist.github.com/dingran/bed1825cc90c085b0deb0f487f059ecf
- unminimize to make system fit for interactive use. is this really necessary?
#+BEGIN_SRC sh
sudo apt-get install ubuntu-desktop gnome-panel gnome-settings-daemon metacity nautilus gnome-terminal
sudo apt-get update
sudo apt-get upgrade
sudo apt-get install vnc4server
sudo apt install xterm fvwm
vncserver -geometry 1024x768
/usr/local/cuda-10.0/bin/nsight
#+END_SRC
- http://theterminallife.com/virtualgl-on-centos-7-using-nvidia-tesla-gpus/



* References: 
- Profiling: https://devblogs.nvidia.com/using-nsight-compute-nvprof-mixed-precision-deep-learning-models/
- Optimizing HPC simulation and visualization code using NVIDIA Nsight systems https://www.youtube.com/watch?v=UaFnnXH6U4E
- Installing drivers https://nelsonslog.wordpress.com/2017/12/11/leela-zero-gpu-machine-learning-on-google-cloud/


